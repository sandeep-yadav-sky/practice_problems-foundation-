#include<bits/stdc++.h>
using namespace std;
int predict(int a[],int noofcust,vector<int>&v,int index)
{
 int res=-1;
	int maxfar=index;
	for(int i=0;i<v.size();i++)
	{
	    int j;
		for(j=index;j<noofcust;j++)
		{
			if(v[i]==a[j])
			{
				
				if(j>maxfar){
					maxfar=j;
					res=i;
				}
				break;
				
			}
		}
		if(j==noofcust)
		return i;
	}
	return (res==-1)?0:res;
}
bool search(vector<int>&v,int x)
{
	for(int i=0;i<v.size();i++)
	{
		if(v[i]==x)
		return true;
	}
	return false;
}
void optimalpage(int a[],int noofcust,int nooftab)
{
	int hit=0;
   vector<int>v;
   	for(int j=0;j<noofcust;j++)
   	{
   	    if(search(v,a[j]))
   		{
   			hit++;
   			continue;
		}
   		if(v.size()<nooftab)
   		v.push_back(a[j]);
   	
   		
		else
		{
			int k=predict(a,noofcust,v,(j+1));
			//cout<<k;
			v[k]=a[j];
		}
	}
   cout<<noofcust-hit<<"\n";
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	int t;
	cin>>t;
	while(t--)
	{
		int nooftab,noofcust;
		cin>>nooftab>>noofcust;
		int a[noofcust];
		for(int i=0;i<noofcust;i++)
		cin>>a[i];
		//	for(int i=0;i<noofcust;i++)
			//cout<<a[i];
		//	cout<<"\n";
	//	cout<<sizeof(a)/sizeof(a[0]);
		optimalpage(a,noofcust,nooftab);
	}
	return 0;
}
