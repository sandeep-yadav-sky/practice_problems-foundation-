/*maximum element of size array will give the size of maximum size of group
and number of different elements other than zero will give the number of groups;*/
/* SANDEEP YADAv*/
#include<bits/stdc++.h>
using namespace std;
#define lld long long int
#define pb push_back
#define mp make_pair
#define fi first
#define se second
#define mod 1000000007
#define fastio ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
lld gcd(lld a,lld b){ if(a<b) { a=a+b; b=a-b; a=a-b;}while(b!=0){lld r=a%b; a=b; b=r;} return a;}
long long power(long long a, long long b, long long m) {a %= m;long long res = 1;while (b > 0) {if (b & 1)res = res * a % m;a = a * a % m;b >>= 1;}return res;}


int findparent(int x,int par[])
{
    if(par[x]==x)
    {
        return x;
    }

    par[x]=findparent(par[x],par);
    return par[x];
}
void unite(int x,int y,int par[],int size[])
{
    int parx=findparent(x,par);
    int pary=findparent(y,par);

    if(parx!=pary)
    {
        if(size[parx]>=size[pary])
        {
            size[parx]+=size[pary];
            size[pary]=0;
            par[pary]=parx;
        }
        else
        {
            size[pary]+=size[parx];
            size[parx]=0;
            par[parx]=pary;
        }
    }
}


int main()
{
    fastio;
   #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    freopen("error.txt","w",stderr);
    #endif
    int t;
    cin>>t;
    while(t--)
    {
    int n,m;
    cin>>n>>m;

    if(m==0)
    {
        cout<<n<<" "<<1<<"\n";
        continue;
    }
    int par[n+1];
    int size[n+1];

    for(int i=0;i<=n;i++)
    {
        par[i]=i;
        size[i]=1;
    }
   // cerr<<m;
    for(int i=0;i<m;i++)
    {
       
        int x,y;
        cin>>x>>y;

        unite(x,y,par,size);
         //cerr<<1;
    }
    int c=0;
    lld ans=1;
    for(int i=1;i<=n;i++)
        {
            if(size[i]!=0)
            {
                c++;
                ans=(ans*size[i])%mod;
            }

        }
        cout<<c<<" "<<ans<<"\n"; // maximum size of group
    }
    return 0;
}
